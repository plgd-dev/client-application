// ************************************************************************
// Copyright (C) 2022 plgd.dev, s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ************************************************************************

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: github.com/plgd-dev/client-application/pb/service.proto

package pb

import (
	context "context"
	pb "github.com/plgd-dev/hub/v2/grpc-gateway/pb"
	events "github.com/plgd-dev/hub/v2/resource-aggregate/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientApplication_GetDevices_FullMethodName             = "/service.pb.ClientApplication/GetDevices"
	ClientApplication_GetDevice_FullMethodName              = "/service.pb.ClientApplication/GetDevice"
	ClientApplication_GetDeviceResourceLinks_FullMethodName = "/service.pb.ClientApplication/GetDeviceResourceLinks"
	ClientApplication_GetResource_FullMethodName            = "/service.pb.ClientApplication/GetResource"
	ClientApplication_UpdateResource_FullMethodName         = "/service.pb.ClientApplication/UpdateResource"
	ClientApplication_CreateResource_FullMethodName         = "/service.pb.ClientApplication/CreateResource"
	ClientApplication_DeleteResource_FullMethodName         = "/service.pb.ClientApplication/DeleteResource"
	ClientApplication_OwnDevice_FullMethodName              = "/service.pb.ClientApplication/OwnDevice"
	ClientApplication_FinishOwnDevice_FullMethodName        = "/service.pb.ClientApplication/FinishOwnDevice"
	ClientApplication_DisownDevice_FullMethodName           = "/service.pb.ClientApplication/DisownDevice"
	ClientApplication_ClearCache_FullMethodName             = "/service.pb.ClientApplication/ClearCache"
	ClientApplication_GetConfiguration_FullMethodName       = "/service.pb.ClientApplication/GetConfiguration"
	ClientApplication_GetJSONWebKeys_FullMethodName         = "/service.pb.ClientApplication/GetJSONWebKeys"
	ClientApplication_GetIdentityCertificate_FullMethodName = "/service.pb.ClientApplication/GetIdentityCertificate"
	ClientApplication_Initialize_FullMethodName             = "/service.pb.ClientApplication/Initialize"
	ClientApplication_FinishInitialize_FullMethodName       = "/service.pb.ClientApplication/FinishInitialize"
	ClientApplication_Reset_FullMethodName                  = "/service.pb.ClientApplication/Reset"
	ClientApplication_OnboardDevice_FullMethodName          = "/service.pb.ClientApplication/OnboardDevice"
	ClientApplication_OffboardDevice_FullMethodName         = "/service.pb.ClientApplication/OffboardDevice"
)

// ClientApplicationClient is the client API for ClientApplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientApplicationClient interface {
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (ClientApplication_GetDevicesClient, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*pb.Device, error)
	GetDeviceResourceLinks(ctx context.Context, in *GetDeviceResourceLinksRequest, opts ...grpc.CallOption) (*events.ResourceLinksPublished, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*pb.Resource, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*pb.UpdateResourceResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*pb.CreateResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*pb.DeleteResourceResponse, error)
	OwnDevice(ctx context.Context, in *OwnDeviceRequest, opts ...grpc.CallOption) (*OwnDeviceResponse, error)
	FinishOwnDevice(ctx context.Context, in *FinishOwnDeviceRequest, opts ...grpc.CallOption) (*FinishOwnDeviceResponse, error)
	DisownDevice(ctx context.Context, in *DisownDeviceRequest, opts ...grpc.CallOption) (*DisownDeviceResponse, error)
	ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error)
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
	GetJSONWebKeys(ctx context.Context, in *GetJSONWebKeysRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	GetIdentityCertificate(ctx context.Context, in *GetIdentityCertificateRequest, opts ...grpc.CallOption) (*GetIdentityCertificateResponse, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	FinishInitialize(ctx context.Context, in *FinishInitializeRequest, opts ...grpc.CallOption) (*FinishInitializeResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	OnboardDevice(ctx context.Context, in *OnboardDeviceRequest, opts ...grpc.CallOption) (*OnboardDeviceResponse, error)
	OffboardDevice(ctx context.Context, in *OffboardDeviceRequest, opts ...grpc.CallOption) (*OffboardDeviceResponse, error)
}

type clientApplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewClientApplicationClient(cc grpc.ClientConnInterface) ClientApplicationClient {
	return &clientApplicationClient{cc}
}

func (c *clientApplicationClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (ClientApplication_GetDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientApplication_ServiceDesc.Streams[0], ClientApplication_GetDevices_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientApplicationGetDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientApplication_GetDevicesClient interface {
	Recv() (*pb.Device, error)
	grpc.ClientStream
}

type clientApplicationGetDevicesClient struct {
	grpc.ClientStream
}

func (x *clientApplicationGetDevicesClient) Recv() (*pb.Device, error) {
	m := new(pb.Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientApplicationClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*pb.Device, error) {
	out := new(pb.Device)
	err := c.cc.Invoke(ctx, ClientApplication_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetDeviceResourceLinks(ctx context.Context, in *GetDeviceResourceLinksRequest, opts ...grpc.CallOption) (*events.ResourceLinksPublished, error) {
	out := new(events.ResourceLinksPublished)
	err := c.cc.Invoke(ctx, ClientApplication_GetDeviceResourceLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*pb.Resource, error) {
	out := new(pb.Resource)
	err := c.cc.Invoke(ctx, ClientApplication_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*pb.UpdateResourceResponse, error) {
	out := new(pb.UpdateResourceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*pb.CreateResourceResponse, error) {
	out := new(pb.CreateResourceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*pb.DeleteResourceResponse, error) {
	out := new(pb.DeleteResourceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) OwnDevice(ctx context.Context, in *OwnDeviceRequest, opts ...grpc.CallOption) (*OwnDeviceResponse, error) {
	out := new(OwnDeviceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_OwnDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) FinishOwnDevice(ctx context.Context, in *FinishOwnDeviceRequest, opts ...grpc.CallOption) (*FinishOwnDeviceResponse, error) {
	out := new(FinishOwnDeviceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_FinishOwnDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) DisownDevice(ctx context.Context, in *DisownDeviceRequest, opts ...grpc.CallOption) (*DisownDeviceResponse, error) {
	out := new(DisownDeviceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_DisownDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error) {
	out := new(ClearCacheResponse)
	err := c.cc.Invoke(ctx, ClientApplication_ClearCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, ClientApplication_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetJSONWebKeys(ctx context.Context, in *GetJSONWebKeysRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, ClientApplication_GetJSONWebKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetIdentityCertificate(ctx context.Context, in *GetIdentityCertificateRequest, opts ...grpc.CallOption) (*GetIdentityCertificateResponse, error) {
	out := new(GetIdentityCertificateResponse)
	err := c.cc.Invoke(ctx, ClientApplication_GetIdentityCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, ClientApplication_Initialize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) FinishInitialize(ctx context.Context, in *FinishInitializeRequest, opts ...grpc.CallOption) (*FinishInitializeResponse, error) {
	out := new(FinishInitializeResponse)
	err := c.cc.Invoke(ctx, ClientApplication_FinishInitialize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, ClientApplication_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) OnboardDevice(ctx context.Context, in *OnboardDeviceRequest, opts ...grpc.CallOption) (*OnboardDeviceResponse, error) {
	out := new(OnboardDeviceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_OnboardDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) OffboardDevice(ctx context.Context, in *OffboardDeviceRequest, opts ...grpc.CallOption) (*OffboardDeviceResponse, error) {
	out := new(OffboardDeviceResponse)
	err := c.cc.Invoke(ctx, ClientApplication_OffboardDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientApplicationServer is the server API for ClientApplication service.
// All implementations must embed UnimplementedClientApplicationServer
// for forward compatibility
type ClientApplicationServer interface {
	GetDevices(*GetDevicesRequest, ClientApplication_GetDevicesServer) error
	GetDevice(context.Context, *GetDeviceRequest) (*pb.Device, error)
	GetDeviceResourceLinks(context.Context, *GetDeviceResourceLinksRequest) (*events.ResourceLinksPublished, error)
	GetResource(context.Context, *GetResourceRequest) (*pb.Resource, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*pb.UpdateResourceResponse, error)
	CreateResource(context.Context, *CreateResourceRequest) (*pb.CreateResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*pb.DeleteResourceResponse, error)
	OwnDevice(context.Context, *OwnDeviceRequest) (*OwnDeviceResponse, error)
	FinishOwnDevice(context.Context, *FinishOwnDeviceRequest) (*FinishOwnDeviceResponse, error)
	DisownDevice(context.Context, *DisownDeviceRequest) (*DisownDeviceResponse, error)
	ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error)
	GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
	GetJSONWebKeys(context.Context, *GetJSONWebKeysRequest) (*structpb.Struct, error)
	GetIdentityCertificate(context.Context, *GetIdentityCertificateRequest) (*GetIdentityCertificateResponse, error)
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	FinishInitialize(context.Context, *FinishInitializeRequest) (*FinishInitializeResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	OnboardDevice(context.Context, *OnboardDeviceRequest) (*OnboardDeviceResponse, error)
	OffboardDevice(context.Context, *OffboardDeviceRequest) (*OffboardDeviceResponse, error)
	mustEmbedUnimplementedClientApplicationServer()
}

// UnimplementedClientApplicationServer must be embedded to have forward compatible implementations.
type UnimplementedClientApplicationServer struct {
}

func (UnimplementedClientApplicationServer) GetDevices(*GetDevicesRequest, ClientApplication_GetDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedClientApplicationServer) GetDevice(context.Context, *GetDeviceRequest) (*pb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedClientApplicationServer) GetDeviceResourceLinks(context.Context, *GetDeviceResourceLinksRequest) (*events.ResourceLinksPublished, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceResourceLinks not implemented")
}
func (UnimplementedClientApplicationServer) GetResource(context.Context, *GetResourceRequest) (*pb.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedClientApplicationServer) UpdateResource(context.Context, *UpdateResourceRequest) (*pb.UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedClientApplicationServer) CreateResource(context.Context, *CreateResourceRequest) (*pb.CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedClientApplicationServer) DeleteResource(context.Context, *DeleteResourceRequest) (*pb.DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedClientApplicationServer) OwnDevice(context.Context, *OwnDeviceRequest) (*OwnDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnDevice not implemented")
}
func (UnimplementedClientApplicationServer) FinishOwnDevice(context.Context, *FinishOwnDeviceRequest) (*FinishOwnDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOwnDevice not implemented")
}
func (UnimplementedClientApplicationServer) DisownDevice(context.Context, *DisownDeviceRequest) (*DisownDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisownDevice not implemented")
}
func (UnimplementedClientApplicationServer) ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCache not implemented")
}
func (UnimplementedClientApplicationServer) GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedClientApplicationServer) GetJSONWebKeys(context.Context, *GetJSONWebKeysRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJSONWebKeys not implemented")
}
func (UnimplementedClientApplicationServer) GetIdentityCertificate(context.Context, *GetIdentityCertificateRequest) (*GetIdentityCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityCertificate not implemented")
}
func (UnimplementedClientApplicationServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedClientApplicationServer) FinishInitialize(context.Context, *FinishInitializeRequest) (*FinishInitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInitialize not implemented")
}
func (UnimplementedClientApplicationServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedClientApplicationServer) OnboardDevice(context.Context, *OnboardDeviceRequest) (*OnboardDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardDevice not implemented")
}
func (UnimplementedClientApplicationServer) OffboardDevice(context.Context, *OffboardDeviceRequest) (*OffboardDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffboardDevice not implemented")
}
func (UnimplementedClientApplicationServer) mustEmbedUnimplementedClientApplicationServer() {}

// UnsafeClientApplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientApplicationServer will
// result in compilation errors.
type UnsafeClientApplicationServer interface {
	mustEmbedUnimplementedClientApplicationServer()
}

func RegisterClientApplicationServer(s grpc.ServiceRegistrar, srv ClientApplicationServer) {
	s.RegisterService(&ClientApplication_ServiceDesc, srv)
}

func _ClientApplication_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientApplicationServer).GetDevices(m, &clientApplicationGetDevicesServer{stream})
}

type ClientApplication_GetDevicesServer interface {
	Send(*pb.Device) error
	grpc.ServerStream
}

type clientApplicationGetDevicesServer struct {
	grpc.ServerStream
}

func (x *clientApplicationGetDevicesServer) Send(m *pb.Device) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientApplication_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetDeviceResourceLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceResourceLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetDeviceResourceLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_GetDeviceResourceLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetDeviceResourceLinks(ctx, req.(*GetDeviceResourceLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_OwnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).OwnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_OwnDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).OwnDevice(ctx, req.(*OwnDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_FinishOwnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishOwnDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).FinishOwnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_FinishOwnDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).FinishOwnDevice(ctx, req.(*FinishOwnDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_DisownDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisownDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).DisownDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_DisownDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).DisownDevice(ctx, req.(*DisownDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_ClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).ClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_ClearCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).ClearCache(ctx, req.(*ClearCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetJSONWebKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJSONWebKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetJSONWebKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_GetJSONWebKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetJSONWebKeys(ctx, req.(*GetJSONWebKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetIdentityCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetIdentityCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_GetIdentityCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetIdentityCertificate(ctx, req.(*GetIdentityCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_FinishInitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishInitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).FinishInitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_FinishInitialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).FinishInitialize(ctx, req.(*FinishInitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_OnboardDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).OnboardDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_OnboardDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).OnboardDevice(ctx, req.(*OnboardDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_OffboardDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffboardDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).OffboardDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientApplication_OffboardDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).OffboardDevice(ctx, req.(*OffboardDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientApplication_ServiceDesc is the grpc.ServiceDesc for ClientApplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientApplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.pb.ClientApplication",
	HandlerType: (*ClientApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _ClientApplication_GetDevice_Handler,
		},
		{
			MethodName: "GetDeviceResourceLinks",
			Handler:    _ClientApplication_GetDeviceResourceLinks_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ClientApplication_GetResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ClientApplication_UpdateResource_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ClientApplication_CreateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ClientApplication_DeleteResource_Handler,
		},
		{
			MethodName: "OwnDevice",
			Handler:    _ClientApplication_OwnDevice_Handler,
		},
		{
			MethodName: "FinishOwnDevice",
			Handler:    _ClientApplication_FinishOwnDevice_Handler,
		},
		{
			MethodName: "DisownDevice",
			Handler:    _ClientApplication_DisownDevice_Handler,
		},
		{
			MethodName: "ClearCache",
			Handler:    _ClientApplication_ClearCache_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _ClientApplication_GetConfiguration_Handler,
		},
		{
			MethodName: "GetJSONWebKeys",
			Handler:    _ClientApplication_GetJSONWebKeys_Handler,
		},
		{
			MethodName: "GetIdentityCertificate",
			Handler:    _ClientApplication_GetIdentityCertificate_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _ClientApplication_Initialize_Handler,
		},
		{
			MethodName: "FinishInitialize",
			Handler:    _ClientApplication_FinishInitialize_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _ClientApplication_Reset_Handler,
		},
		{
			MethodName: "OnboardDevice",
			Handler:    _ClientApplication_OnboardDevice_Handler,
		},
		{
			MethodName: "OffboardDevice",
			Handler:    _ClientApplication_OffboardDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _ClientApplication_GetDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/plgd-dev/client-application/pb/service.proto",
}

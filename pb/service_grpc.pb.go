// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	pb "github.com/plgd-dev/hub/v2/grpc-gateway/pb"
	events "github.com/plgd-dev/hub/v2/resource-aggregate/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientApplicationClient is the client API for ClientApplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientApplicationClient interface {
	// Discover devices by client application. This operation fills cache of mappings deviceId to endpoints and this cache is used by other calls.
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (ClientApplication_GetDevicesClient, error)
	// Get device information from the device. Device needs to be stored in cache otherwise it returns not found.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*pb.Device, error)
	// Get resource links of devices. Device needs to be stored in cache otherwise it returns not found.
	GetDeviceResourceLinks(ctx context.Context, in *GetDeviceResourceLinksRequest, opts ...grpc.CallOption) (*events.ResourceLinksPublished, error)
	// Get a resource from the device. Device needs to be stored in cache otherwise it returns not found.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*pb.Resource, error)
	// Update a resource at the device. Device needs to be stored in cache otherwise it returns not found.
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*pb.UpdateResourceResponse, error)
	// Create a resource at the device. Device needs to be stored in cache otherwise it returns not found.
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*pb.CreateResourceResponse, error)
	// Delete a resource at the device. Device needs to be stored in cache otherwise it returns not found.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*pb.DeleteResourceResponse, error)
	// Own the device. Device needs to be stored in cache otherwise it returns not found.
	OwnDevice(ctx context.Context, in *OwnDeviceRequest, opts ...grpc.CallOption) (*OwnDeviceResponse, error)
	// Disown the device. Device needs to be stored in cache otherwise it returns not found.
	DisownDevice(ctx context.Context, in *DisownDeviceRequest, opts ...grpc.CallOption) (*DisownDeviceResponse, error)
	// Deletes all devices from the cache. To fill the cache again, call GetDevices.
	ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error)
	GetInformation(ctx context.Context, in *GetInformationRequest, opts ...grpc.CallOption) (*GetInformationResponse, error)
}

type clientApplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewClientApplicationClient(cc grpc.ClientConnInterface) ClientApplicationClient {
	return &clientApplicationClient{cc}
}

func (c *clientApplicationClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (ClientApplication_GetDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientApplication_ServiceDesc.Streams[0], "/service.pb.ClientApplication/GetDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientApplicationGetDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientApplication_GetDevicesClient interface {
	Recv() (*pb.Device, error)
	grpc.ClientStream
}

type clientApplicationGetDevicesClient struct {
	grpc.ClientStream
}

func (x *clientApplicationGetDevicesClient) Recv() (*pb.Device, error) {
	m := new(pb.Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientApplicationClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*pb.Device, error) {
	out := new(pb.Device)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetDeviceResourceLinks(ctx context.Context, in *GetDeviceResourceLinksRequest, opts ...grpc.CallOption) (*events.ResourceLinksPublished, error) {
	out := new(events.ResourceLinksPublished)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/GetDeviceResourceLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*pb.Resource, error) {
	out := new(pb.Resource)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*pb.UpdateResourceResponse, error) {
	out := new(pb.UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*pb.CreateResourceResponse, error) {
	out := new(pb.CreateResourceResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*pb.DeleteResourceResponse, error) {
	out := new(pb.DeleteResourceResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) OwnDevice(ctx context.Context, in *OwnDeviceRequest, opts ...grpc.CallOption) (*OwnDeviceResponse, error) {
	out := new(OwnDeviceResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/OwnDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) DisownDevice(ctx context.Context, in *DisownDeviceRequest, opts ...grpc.CallOption) (*DisownDeviceResponse, error) {
	out := new(DisownDeviceResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/DisownDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error) {
	out := new(ClearCacheResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/ClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientApplicationClient) GetInformation(ctx context.Context, in *GetInformationRequest, opts ...grpc.CallOption) (*GetInformationResponse, error) {
	out := new(GetInformationResponse)
	err := c.cc.Invoke(ctx, "/service.pb.ClientApplication/GetInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientApplicationServer is the server API for ClientApplication service.
// All implementations must embed UnimplementedClientApplicationServer
// for forward compatibility
type ClientApplicationServer interface {
	// Discover devices by client application. This operation fills cache of mappings deviceId to endpoints and this cache is used by other calls.
	GetDevices(*GetDevicesRequest, ClientApplication_GetDevicesServer) error
	// Get device information from the device. Device needs to be stored in cache otherwise it returns not found.
	GetDevice(context.Context, *GetDeviceRequest) (*pb.Device, error)
	// Get resource links of devices. Device needs to be stored in cache otherwise it returns not found.
	GetDeviceResourceLinks(context.Context, *GetDeviceResourceLinksRequest) (*events.ResourceLinksPublished, error)
	// Get a resource from the device. Device needs to be stored in cache otherwise it returns not found.
	GetResource(context.Context, *GetResourceRequest) (*pb.Resource, error)
	// Update a resource at the device. Device needs to be stored in cache otherwise it returns not found.
	UpdateResource(context.Context, *UpdateResourceRequest) (*pb.UpdateResourceResponse, error)
	// Create a resource at the device. Device needs to be stored in cache otherwise it returns not found.
	CreateResource(context.Context, *CreateResourceRequest) (*pb.CreateResourceResponse, error)
	// Delete a resource at the device. Device needs to be stored in cache otherwise it returns not found.
	DeleteResource(context.Context, *DeleteResourceRequest) (*pb.DeleteResourceResponse, error)
	// Own the device. Device needs to be stored in cache otherwise it returns not found.
	OwnDevice(context.Context, *OwnDeviceRequest) (*OwnDeviceResponse, error)
	// Disown the device. Device needs to be stored in cache otherwise it returns not found.
	DisownDevice(context.Context, *DisownDeviceRequest) (*DisownDeviceResponse, error)
	// Deletes all devices from the cache. To fill the cache again, call GetDevices.
	ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error)
	GetInformation(context.Context, *GetInformationRequest) (*GetInformationResponse, error)
	mustEmbedUnimplementedClientApplicationServer()
}

// UnimplementedClientApplicationServer must be embedded to have forward compatible implementations.
type UnimplementedClientApplicationServer struct {
}

func (UnimplementedClientApplicationServer) GetDevices(*GetDevicesRequest, ClientApplication_GetDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedClientApplicationServer) GetDevice(context.Context, *GetDeviceRequest) (*pb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedClientApplicationServer) GetDeviceResourceLinks(context.Context, *GetDeviceResourceLinksRequest) (*events.ResourceLinksPublished, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceResourceLinks not implemented")
}
func (UnimplementedClientApplicationServer) GetResource(context.Context, *GetResourceRequest) (*pb.Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedClientApplicationServer) UpdateResource(context.Context, *UpdateResourceRequest) (*pb.UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedClientApplicationServer) CreateResource(context.Context, *CreateResourceRequest) (*pb.CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedClientApplicationServer) DeleteResource(context.Context, *DeleteResourceRequest) (*pb.DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedClientApplicationServer) OwnDevice(context.Context, *OwnDeviceRequest) (*OwnDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnDevice not implemented")
}
func (UnimplementedClientApplicationServer) DisownDevice(context.Context, *DisownDeviceRequest) (*DisownDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisownDevice not implemented")
}
func (UnimplementedClientApplicationServer) ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCache not implemented")
}
func (UnimplementedClientApplicationServer) GetInformation(context.Context, *GetInformationRequest) (*GetInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInformation not implemented")
}
func (UnimplementedClientApplicationServer) mustEmbedUnimplementedClientApplicationServer() {}

// UnsafeClientApplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientApplicationServer will
// result in compilation errors.
type UnsafeClientApplicationServer interface {
	mustEmbedUnimplementedClientApplicationServer()
}

func RegisterClientApplicationServer(s grpc.ServiceRegistrar, srv ClientApplicationServer) {
	s.RegisterService(&ClientApplication_ServiceDesc, srv)
}

func _ClientApplication_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientApplicationServer).GetDevices(m, &clientApplicationGetDevicesServer{stream})
}

type ClientApplication_GetDevicesServer interface {
	Send(*pb.Device) error
	grpc.ServerStream
}

type clientApplicationGetDevicesServer struct {
	grpc.ServerStream
}

func (x *clientApplicationGetDevicesServer) Send(m *pb.Device) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientApplication_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetDeviceResourceLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceResourceLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetDeviceResourceLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/GetDeviceResourceLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetDeviceResourceLinks(ctx, req.(*GetDeviceResourceLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_OwnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).OwnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/OwnDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).OwnDevice(ctx, req.(*OwnDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_DisownDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisownDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).DisownDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/DisownDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).DisownDevice(ctx, req.(*DisownDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_ClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).ClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/ClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).ClearCache(ctx, req.(*ClearCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApplication_GetInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientApplicationServer).GetInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.pb.ClientApplication/GetInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApplicationServer).GetInformation(ctx, req.(*GetInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientApplication_ServiceDesc is the grpc.ServiceDesc for ClientApplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientApplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.pb.ClientApplication",
	HandlerType: (*ClientApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _ClientApplication_GetDevice_Handler,
		},
		{
			MethodName: "GetDeviceResourceLinks",
			Handler:    _ClientApplication_GetDeviceResourceLinks_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ClientApplication_GetResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ClientApplication_UpdateResource_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ClientApplication_CreateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ClientApplication_DeleteResource_Handler,
		},
		{
			MethodName: "OwnDevice",
			Handler:    _ClientApplication_OwnDevice_Handler,
		},
		{
			MethodName: "DisownDevice",
			Handler:    _ClientApplication_DisownDevice_Handler,
		},
		{
			MethodName: "ClearCache",
			Handler:    _ClientApplication_ClearCache_Handler,
		},
		{
			MethodName: "GetInformation",
			Handler:    _ClientApplication_GetInformation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _ClientApplication_GetDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/plgd-dev/client-application/pb/service.proto",
}

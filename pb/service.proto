// ************************************************************************
// Copyright (C) 2022 plgd.dev, s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ************************************************************************

syntax = "proto3";

package service.pb;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "pb/clear_cache.proto";
import "pb/get_device.proto";
import "pb/get_devices.proto";
import "pb/get_resource.proto";
import "pb/create_resource.proto";
import "pb/delete_resource.proto";
import "pb/update_resource.proto";
import "pb/get_device_resource_links.proto";
import "pb/own_device.proto";
import "pb/disown_device.proto";
import "pb/get_configuration.proto";
import "pb/get_identity_csr.proto";
import "pb/update_identity_certificate.proto";
import "pb/get_identity_certificate.proto";
import "pb/get_json_web_keys.proto";
import "pb/update_json_web_keys.proto";
import "pb/initialize.proto";

import "grpc-gateway/pb/devices.proto";
import "resource-aggregate/pb/events.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "plgd client application - API";
    version: "1.0";
    description: "";
    contact: {
      name: "plgd.dev";
      url: "https://github.com/plgd-dev/device";
      email: "info@plgd.dev";
    };
    license: {
      name: "Apache License 2.0";
      url: "https://github.com/plgd-dev/device/blob/v2/LICENSE";
    };
  };
  schemes: [ HTTPS ];
  consumes: [ "application/json", "application/protojson" ];
  produces: [ "application/json", "application/protojson" ];
};

option go_package = "github.com/plgd-dev/client-application/pb;pb";
// https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

service ClientApplication {
  // Discover devices by client application. This operation fills cache of mappings deviceId to endpoints and this cache is used by other calls.
  rpc GetDevices (GetDevicesRequest) returns (stream grpcgateway.pb.Device) {
    option (google.api.http) = {
      get: "/api/v1/devices"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Devices" ]
    };
  }

  // Get device information from the device. Device needs to be stored in cache otherwise it returns not found.
  rpc GetDevice (GetDeviceRequest) returns (grpcgateway.pb.Device) {
    option (google.api.http) = {
      get: "/api/v1/devices/{device_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Device" ]
    };
  }

  
  // Get resource links of devices. Device needs to be stored in cache otherwise it returns not found.
  rpc GetDeviceResourceLinks(GetDeviceResourceLinksRequest) returns (resourceaggregate.pb.ResourceLinksPublished) {
    option (google.api.http) = {
      get: "/api/v1/devices/{device_id}/resource-links"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Device" ]
    };
  }
  

  // Get a resource from the device. Device needs to be stored in cache otherwise it returns not found.
  rpc GetResource(GetResourceRequest) returns (grpcgateway.pb.Resource) {
    option (google.api.http) = {
      get: "/api/v1/devices/{resource_id.device_id}/resources/{resource_id.href=**}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Resource" ]
    };
  }

  // Update a resource at the device. Device needs to be stored in cache otherwise it returns not found.
  rpc UpdateResource(UpdateResourceRequest) returns (grpcgateway.pb.UpdateResourceResponse) {
    option (google.api.http) = {
      put: "/api/v1/devices/{resource_id.device_id}/resources/{resource_id.href=**}"
      body: "content"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Resource" ]
    };
  }

  // Create a resource at the device. Device needs to be stored in cache otherwise it returns not found.
  rpc CreateResource(CreateResourceRequest) returns (grpcgateway.pb.CreateResourceResponse) {
    option (google.api.http) = {
      post: "/api/v1/devices/{resource_id.device_id}/resource-links/{resource_id.href=**}"
      body: "content"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Resource" ]
    };
  }

  // Delete a resource at the device. Device needs to be stored in cache otherwise it returns not found.
  rpc DeleteResource(DeleteResourceRequest) returns (grpcgateway.pb.DeleteResourceResponse) {
    option (google.api.http) = {
      delete: "/api/v1/devices/{resource_id.device_id}/resource-links/{resource_id.href=**}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Resource" ]
    };
  }


  // Own the device. Device needs to be stored in cache otherwise it returns not found.
  rpc OwnDevice(OwnDeviceRequest) returns (OwnDeviceResponse) {
    option (google.api.http) = {
      post: "/api/v1/devices/{device_id}/own"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Device" ]
    };
  }

  // Disown the device. Device needs to be stored in cache otherwise it returns not found.
  rpc DisownDevice(DisownDeviceRequest) returns (DisownDeviceResponse) {
    option (google.api.http) = {
      post: "/api/v1/devices/{device_id}/disown"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Device" ]
    };
  }

  // Deletes all devices from the cache. To fill the cache again, call GetDevices.
  rpc ClearCache(ClearCacheRequest) returns (ClearCacheResponse) {
    option (google.api.http) = {
      delete: "/api/v1/devices"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Devices" ]
    };
  }

  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {
    option (google.api.http) = {
      get: "/.well-known/configuration"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

  rpc UpdateJSONWebKeys(UpdateJSONWebKeysRequest) returns (UpdateJSONWebKeysResponse) {
    option (google.api.http) = {
      post: "/.well-known/jwks.json"
      body: "jwks"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

  rpc GetJSONWebKeys(GetJSONWebKeysRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/.well-known/jwks.json"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

  // Get identity CSR from the client application for creating a new identity certificate.
  rpc GetIdentityCSR(GetIdentityCSRRequest) returns (GetIdentityCSRResponse) {
    option (google.api.http) = {
      get: "/api/v1/identity/csr"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

  // Set or update identity certificate for the client application.
  rpc UpdateIdentityCertificate(UpdateIdentityCertificateRequest) returns (UpdateIdentityCertificateResponse) {
    option (google.api.http) = {
      post: "/api/v1/identity/certificate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

  // Get identity certificate of the client application.
  rpc GetIdentityCertificate(GetIdentityCertificateRequest) returns (GetIdentityCertificateResponse) {
    option (google.api.http) = {
      get: "/api/v1/identity/certificate"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

   // Initialize application when GetConfiguration.is_nitialized is set to false.
   // Look to initialize.plantuml for flows.
   rpc Initialize(InitializeRequest) returns (InitializeResponse) {
    option (google.api.http) = {
      post: "/api/v1/initialize"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "client-application" ]
    };
  }

}